// taskslice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Task } from '../components/molecules/taskform'; // Import Task interface

// Define the initial state for tasks
interface TaskState {
  tasks: Task[];
}

const initialState: TaskState = {
  tasks: [],
};

// Create a slice for managing tasks
const taskSlice = createSlice({
  name: 'tasks',
  initialState,
  reducers: {
    // Add a reducer for adding a new task
    addTask: (state, action: PayloadAction<Task>) => {
      return {
        ...state,
        tasks: (state.tasks || []).concat(action.payload)
      };
    },
    
    // Add a reducer for toggling task completion
    toggleTaskCompleted: (state, action: PayloadAction<string>) => {
      const taskId = action.payload;
      return {
        ...state,
        tasks: state.tasks.map(task => {
          if (task.id === taskId) {
            return {
              ...task,
              completed: !task.completed,
            };
          }
          return task;
        }),
      };
    },
    
    // Add a reducer for deleting a task
    deleteTask: (state, action: PayloadAction<string>) => {
      const taskId = action.payload;
      return {
        ...state,
        tasks: state.tasks.filter(task => task.id !== taskId)
      };
    },    
    
  },
});

// Export action creators generated by createSlice
export const { addTask, toggleTaskCompleted, deleteTask } = taskSlice.actions;

// Export the reducer function generated by createSlice
export default taskSlice.reducer;
